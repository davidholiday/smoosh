package com.projectvalis.util;

import java.util.Random;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.holitek.smoosh.OLD.ByteManipulation;


/**
 * methods specific to running tests only. other utilities located in 
 * util packages.
 * 
 * @author snerd
 *
 */
public class TestHelper {

	static Logger LOGGER = LoggerFactory.getLogger(TestHelper.class);

	/**
	 * creates an [n] sized byte array populated with random bytes.
	 * 
	 * @param numBytesI
	 * @return populated array
	 */
	public static byte[] createByteArray(int numBytesI) {
		Random randy = new Random();
		byte[] generatedByteARR = new byte[numBytesI];

		for (int i = 0; i < numBytesI; i++) {
			generatedByteARR[i] = (byte) randy.nextInt(256);
		}

		String generatedBytesS = 
				ByteManipulation.getHexString(generatedByteARR);
		
		LOGGER.info("GENERATED BYTES ARE: " + generatedBytesS.toUpperCase());
		return generatedByteARR;
	}
	
	
	
	/**
	 * same as the regular rabin fingerprint method except this one returns
	 * the push table values used during processing
	 * 
	 * @param bytes
	 * @param shift
	 * @param pushTable
	 * @return
	 */
	public static long[] pushBytesReturnXorValues(
			final byte[] bytes, int shift, long[] pushTable) {
		
		long fingerprintL = 0;
		long[] xorValARR = new long[bytes.length];
		
		for (int i = 0; i < bytes.length; i ++) {
			int j = (int) ((fingerprintL >> shift) & 0x1FF);
			
			fingerprintL = 
					((fingerprintL << 8) | (bytes[i] & 0xFF)) ^ pushTable[j];
			
			xorValARR[i] = pushTable[j];
		}
		
		return xorValARR;
		
	}
	

	
	/**
	 * same as the regular rabin fingerprint method except this one returns
	 * the push table values used during processing
	 * 
	 * @param bytes
	 * @param shift
	 * @param pushTable
	 * @return
	 */
	public static int[] pushBytesReturnXorIndexes(
			final byte[] bytes, int shift, long[] pushTable) {
		
		long fingerprintL = 0;
		int[] xorIndexARR = new int[bytes.length];
		
		for (int i = 0; i < bytes.length; i ++) {
			int j = (int) ((fingerprintL >> shift) & 0x1FF);
			
			fingerprintL = 
					((fingerprintL << 8) | (bytes[i] & 0xFF)) ^ pushTable[j];
			
			xorIndexARR[i] = j;
		}
		
		return xorIndexARR;
		
	}
	
	
	
	
}













